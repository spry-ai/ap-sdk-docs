{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u00b6 Build intelligence into your apps using Spry RTM SDKs Introduction \u00b6 Spry RTM developer platform is a core part of our mission to empower organizations to grow better. Our APIs are designed to enable teams of any shape or size to build robust integrations that help them customize and get the most value out of remote computer vision assessments. All Spry SDKs and APIs are designed to have a predictable structure.","title":"Index"},{"location":"#_1","text":"","title":""},{"location":"#introduction","text":"Spry RTM developer platform is a core part of our mission to empower organizations to grow better. Our APIs are designed to enable teams of any shape or size to build robust integrations that help them customize and get the most value out of remote computer vision assessments. All Spry SDKs and APIs are designed to have a predictable structure.","title":"Introduction"},{"location":"getting_started/","text":"Getting Started \u00b6 This documentation describes how to integrate your Spry RTM SDK to build engaging computer vision assessment apps. Spry Prescription SDK for Javascript Spry Mobile SDKs for RTM SPry RTM APIs for report dashboarding and Adherence tracking Code and samples for the Spry SDKs will be available on GitHub. When you use the Spry SDKs, follow the Spry RTM Terms of Use and Privacy Policy. App Store Connect Requirements \u00b6 To provide functionality within the Spry iOS SDK, we may receive and process certain contact, location, identifier, and device information associated with assessment users and their use of your application. The information we receive depends on what SDK features third party applications use.","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"This documentation describes how to integrate your Spry RTM SDK to build engaging computer vision assessment apps. Spry Prescription SDK for Javascript Spry Mobile SDKs for RTM SPry RTM APIs for report dashboarding and Adherence tracking Code and samples for the Spry SDKs will be available on GitHub. When you use the Spry SDKs, follow the Spry RTM Terms of Use and Privacy Policy.","title":"Getting Started"},{"location":"getting_started/#app-store-connect-requirements","text":"To provide functionality within the Spry iOS SDK, we may receive and process certain contact, location, identifier, and device information associated with assessment users and their use of your application. The information we receive depends on what SDK features third party applications use.","title":"App Store Connect Requirements"},{"location":"prescription/","text":"","title":"Prescription"},{"location":"android/","text":"Introduction \u00b6 This documentation describes how to integrate your iOS app with Spry RTM SDK to build engaging computer vision assessment apps by using the Spry SDK for iOS. Code and samples for the Spry SDK for iOS will be available on GitHub. When you use the Spry SDK for iOS, follow the Spry RTM Terms of Use and Privacy Policy. App Store Connect Requirements \u00b6 To provide functionality within the Spry iOS SDK, we may receive and process certain contact, location, identifier, and device information associated with assessment users and their use of your application. The information we receive depends on what SDK features third party applications use.","title":"Introduction"},{"location":"android/#introduction","text":"This documentation describes how to integrate your iOS app with Spry RTM SDK to build engaging computer vision assessment apps by using the Spry SDK for iOS. Code and samples for the Spry SDK for iOS will be available on GitHub. When you use the Spry SDK for iOS, follow the Spry RTM Terms of Use and Privacy Policy.","title":"Introduction"},{"location":"android/#app-store-connect-requirements","text":"To provide functionality within the Spry iOS SDK, we may receive and process certain contact, location, identifier, and device information associated with assessment users and their use of your application. The information we receive depends on what SDK features third party applications use.","title":"App Store Connect Requirements"},{"location":"android/install/","text":"Getting Started \u00b6 This documentation describes how to integrate your iOS app with Spry RTM SDK to build engaging computer vision assessment apps by using the Spry SDK for iOS. Code and samples for the Spry SDK for iOS will be available on GitHub. When you use the Spry SDK for iOS, follow the Spry RTM Terms of Use and Privacy Policy. App Store Connect Requirements \u00b6 To provide functionality within the Spry iOS SDK, we may receive and process certain contact, location, identifier, and device information associated with assessment users and their use of your application. The information we receive depends on what SDK features third party applications use.","title":"Getting Started"},{"location":"android/install/#getting-started","text":"This documentation describes how to integrate your iOS app with Spry RTM SDK to build engaging computer vision assessment apps by using the Spry SDK for iOS. Code and samples for the Spry SDK for iOS will be available on GitHub. When you use the Spry SDK for iOS, follow the Spry RTM Terms of Use and Privacy Policy.","title":"Getting Started"},{"location":"android/install/#app-store-connect-requirements","text":"To provide functionality within the Spry iOS SDK, we may receive and process certain contact, location, identifier, and device information associated with assessment users and their use of your application. The information we receive depends on what SDK features third party applications use.","title":"App Store Connect Requirements"},{"location":"api/","text":"Overview \u00b6 The Spry API is mainly organized around the webhook pattern. Automated messages arrive at your designated address, whenever an activity is generated. For activities in the past, or should you wish to fetch data manually, REST endpoints are also available. Our API accepts JSON-encoded request bodies (where a body is required) or a standard set of query parameters, returns JSON-encoded responses, and uses standard HTTP response codes and verbs. See Integrations for a full list of API-based integrations.","title":"Overview"},{"location":"api/#overview","text":"The Spry API is mainly organized around the webhook pattern. Automated messages arrive at your designated address, whenever an activity is generated. For activities in the past, or should you wish to fetch data manually, REST endpoints are also available. Our API accepts JSON-encoded request bodies (where a body is required) or a standard set of query parameters, returns JSON-encoded responses, and uses standard HTTP response codes and verbs. See Integrations for a full list of API-based integrations.","title":"Overview"},{"location":"api/requests/","text":"Spry RTM API Scroll down for code samples, example requests and responses. Select a language for code samples from the tabs above or the mobile navigation menu. Authentication \u00b6 API Key (APIKeyQuery) Parameter Name: ML_API_KEY , in: query. API Key (APIKeyHeader) Parameter Name: ML_API_KEY , in: header. API Key (APIKeyCookie) Parameter Name: ML_API_KEY , in: cookie. Default make_pdf_pdf_post \u00b6 Code samples # You can also use wget curl -X POST /pdf \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json' POST /pdf HTTP / 1.1 Content-Type: application/json Accept: application/json const inputBody = '{ \"report_url\": \"https://assessment.spryhealth.care/report/158b8f3d\" }' ; const headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }; fetch ( '/pdf' , { method : 'POST' , body : inputBody , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json' , 'Accept' => 'application/json' } result = RestClient . post '/pdf' , params : { }, headers : headers p JSON . parse ( result ) import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' } r = requests . post ( '/pdf' , headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Content-Type' => 'application/json' , 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'POST' , '/pdf' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/pdf\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"POST\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Content-Type\" : [] string { \"application/json\" }, \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"POST\" , \"/pdf\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } POST /pdf Make Pdf Body parameter { \"report_url\" : \"https://assessment.spryhealth.care/report/158b8f3d\" } Parameters Name In Type Required Description body body ReportModel true none Example responses 200 Response null Responses Status Meaning Description Schema 200 OK Successful Response Inline 422 Unprocessable Entity Validation Error HTTPValidationError Response Schema To perform this operation, you must be authenticated by means of one of the following methods: APIKeyQuery, APIKeyHeader, APIKeyCookie make_keypoints_keypoints_post \u00b6 Code samples # You can also use wget curl -X POST /keypoints \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json' POST /keypoints HTTP / 1.1 Content-Type: application/json Accept: application/json const inputBody = '{ \"url\": \"https://firebasestorage.googleapis.com/v0/b/assessment-portal-70b0e.appspot.com/o/physiotestingdata%2Fascbadd%40pq.com%2F040612d8%2FRShoulderflexionFriNov04202217%3A03%3A17GMT%2B0530(IndiaStandardTime).webm?alt=media&token=f6157d85-3aee-4149-8ea4-f3093f3e8299\", \"data_path\": \"user_id/session_id/exercise_id\", \"confidence\": 0.5, \"is_video_model\": 0 }' ; const headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }; fetch ( '/keypoints' , { method : 'POST' , body : inputBody , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json' , 'Accept' => 'application/json' } result = RestClient . post '/keypoints' , params : { }, headers : headers p JSON . parse ( result ) import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' } r = requests . post ( '/keypoints' , headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Content-Type' => 'application/json' , 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'POST' , '/keypoints' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/keypoints\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"POST\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Content-Type\" : [] string { \"application/json\" }, \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"POST\" , \"/keypoints\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } POST /keypoints Make Keypoints Body parameter { \"url\" : \"https://firebasestorage.googleapis.com/v0/b/assessment-portal-70b0e.appspot.com/o/physiotestingdata%2Fascbadd%40pq.com%2F040612d8%2FRShoulderflexionFriNov04202217%3A03%3A17GMT%2B0530(IndiaStandardTime).webm?alt=media&token=f6157d85-3aee-4149-8ea4-f3093f3e8299\" , \"data_path\" : \"user_id/session_id/exercise_id\" , \"confidence\" : 0.5 , \"is_video_model\" : 0 } Parameters Name In Type Required Description body body KeypointsModel true none Example responses 200 Response null Responses Status Meaning Description Schema 200 OK Successful Response Inline 422 Unprocessable Entity Validation Error HTTPValidationError Response Schema To perform this operation, you must be authenticated by means of one of the following methods: APIKeyQuery, APIKeyHeader, APIKeyCookie make_keypoints_voice_post \u00b6 Code samples # You can also use wget curl -X POST /voice \\ -H 'Content-Type: multipart/form-data' \\ -H 'Accept: application/json' POST /voice HTTP / 1.1 Content-Type: multipart/form-data Accept: application/json const inputBody = '{ \"sound\": \"string\" }' ; const headers = { 'Content-Type' : 'multipart/form-data' , 'Accept' : 'application/json' }; fetch ( '/voice' , { method : 'POST' , body : inputBody , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data' , 'Accept' => 'application/json' } result = RestClient . post '/voice' , params : { }, headers : headers p JSON . parse ( result ) import requests headers = { 'Content-Type' : 'multipart/form-data' , 'Accept' : 'application/json' } r = requests . post ( '/voice' , headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Content-Type' => 'multipart/form-data' , 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'POST' , '/voice' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/voice\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"POST\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Content-Type\" : [] string { \"multipart/form-data\" }, \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"POST\" , \"/voice\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } POST /voice Make Keypoints Body parameter sound : string Parameters Name In Type Required Description body body Body_make_keypoints_voice_post true none Example responses 200 Response null Responses Status Meaning Description Schema 200 OK Successful Response Inline 422 Unprocessable Entity Validation Error HTTPValidationError Response Schema To perform this operation, you must be authenticated by means of one of the following methods: APIKeyQuery, APIKeyHeader, APIKeyCookie get_status_tasks__task_id__get \u00b6 Code samples # You can also use wget curl -X GET /tasks/ { task_id } \\ -H 'Accept: application/json' GET /tasks/{task_id} HTTP / 1.1 Accept: application/json const headers = { 'Accept' : 'application/json' }; fetch ( '/tasks/{task_id}' , { method : 'GET' , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient . get '/tasks/{task_id}' , params : { }, headers : headers p JSON . parse ( result ) import requests headers = { 'Accept' : 'application/json' } r = requests . get ( '/tasks/ {task_id} ' , headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'GET' , '/tasks/{task_id}' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/tasks/{task_id}\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"GET\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"GET\" , \"/tasks/{task_id}\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } GET /tasks/{task_id} Get Status Parameters Name In Type Required Description task_id path any true none Example responses 200 Response null Responses Status Meaning Description Schema 200 OK Successful Response Inline 422 Unprocessable Entity Validation Error HTTPValidationError Response Schema To perform this operation, you must be authenticated by means of one of the following methods: APIKeyQuery, APIKeyHeader, APIKeyCookie get_status_image_user_id_session_id_exercise_id_frame_id_get \u00b6 Code samples # You can also use wget curl -X GET /image/user_id/session_id/exercise_id/frame_id \\ -H 'Accept: application/json' GET /image/user_id/session_id/exercise_id/frame_id HTTP / 1.1 Accept: application/json const headers = { 'Accept' : 'application/json' }; fetch ( '/image/user_id/session_id/exercise_id/frame_id' , { method : 'GET' , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient . get '/image/user_id/session_id/exercise_id/frame_id' , params : { 'user_id' => 'any' , 'session_id' => 'any' , 'exercise_id' => 'any' , 'frame_id' => 'any' }, headers : headers p JSON . parse ( result ) import requests headers = { 'Accept' : 'application/json' } r = requests . get ( '/image/user_id/session_id/exercise_id/frame_id' , params = { 'user_id' : null , 'session_id' : null , 'exercise_id' : null , 'frame_id' : null }, headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'GET' , '/image/user_id/session_id/exercise_id/frame_id' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/image/user_id/session_id/exercise_id/frame_id\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"GET\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"GET\" , \"/image/user_id/session_id/exercise_id/frame_id\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } GET /image/user_id/session_id/exercise_id/frame_id Get Status Parameters Name In Type Required Description user_id query any true none session_id query any true none exercise_id query any true none frame_id query any true none Example responses 200 Response null Responses Status Meaning Description Schema 200 OK Successful Response Inline 422 Unprocessable Entity Validation Error HTTPValidationError Response Schema To perform this operation, you must be authenticated by means of one of the following methods: APIKeyQuery, APIKeyHeader, APIKeyCookie get_gifs_gif_post \u00b6 Code samples # You can also use wget curl -X POST /gif \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json' POST /gif HTTP / 1.1 Content-Type: application/json Accept: application/json const inputBody = '{ \"data_path\": \"user_id/session_id/exercise_id\", \"images\": [ \"frame0.png\", \"frame1.png\", \"frame2.png\", \"frame3.png\" ] }' ; const headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }; fetch ( '/gif' , { method : 'POST' , body : inputBody , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json' , 'Accept' => 'application/json' } result = RestClient . post '/gif' , params : { }, headers : headers p JSON . parse ( result ) import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' } r = requests . post ( '/gif' , headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Content-Type' => 'application/json' , 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'POST' , '/gif' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/gif\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"POST\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Content-Type\" : [] string { \"application/json\" }, \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"POST\" , \"/gif\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } POST /gif Get Gifs Body parameter { \"data_path\" : \"user_id/session_id/exercise_id\" , \"images\" : [ \"frame0.png\" , \"frame1.png\" , \"frame2.png\" , \"frame3.png\" ] } Parameters Name In Type Required Description body body GifImageModel true none Example responses 200 Response null Responses Status Meaning Description Schema 200 OK Successful Response Inline 422 Unprocessable Entity Validation Error HTTPValidationError Response Schema To perform this operation, you must be authenticated by means of one of the following methods: APIKeyQuery, APIKeyHeader, APIKeyCookie description_writer build_clinic_desctription_clinic_description_post \u00b6 Code samples # You can also use wget curl -X POST /clinic_description \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json' POST /clinic_description HTTP / 1.1 Content-Type: application/json Accept: application/json const inputBody = '{ \"category\": \"clinic\", \"name\": \"\", \"location\": \"\", \"year_founded\": \"\", \"services\": \"\", \"equipments\": \"\", \"keywords\": \"\" }' ; const headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }; fetch ( '/clinic_description' , { method : 'POST' , body : inputBody , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json' , 'Accept' => 'application/json' } result = RestClient . post '/clinic_description' , params : { }, headers : headers p JSON . parse ( result ) import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' } r = requests . post ( '/clinic_description' , headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Content-Type' => 'application/json' , 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'POST' , '/clinic_description' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/clinic_description\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"POST\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Content-Type\" : [] string { \"application/json\" }, \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"POST\" , \"/clinic_description\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } POST /clinic_description Build Clinic Desctription Body parameter { \"category\" : \"clinic\" , \"name\" : \"\" , \"location\" : \"\" , \"year_founded\" : \"\" , \"services\" : \"\" , \"equipments\" : \"\" , \"keywords\" : \"\" } Parameters Name In Type Required Description body body ClinicItem true none Example responses 200 Response null Responses Status Meaning Description Schema 200 OK Successful Response Inline 422 Unprocessable Entity Validation Error HTTPValidationError Response Schema To perform this operation, you must be authenticated by means of one of the following methods: APIKeyQuery, APIKeyHeader, APIKeyCookie build_doc_description_doc_description_post \u00b6 Code samples # You can also use wget curl -X POST /doc_description \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json' POST /doc_description HTTP / 1.1 Content-Type: application/json Accept: application/json const inputBody = '{ \"titles\": \"Dr.\", \"category\": \"clinic\", \"name\": \"\", \"location\": \"\", \"speciality\": \"\", \"hobbies\": \"\", \"education\": \"\", \"keywords\": \"\", \"countries\": \"\", \"passion\": \"\", \"pronouns\": \"she/her\", \"service_years\": \"\", \"experience_years\": \"\" }' ; const headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }; fetch ( '/doc_description' , { method : 'POST' , body : inputBody , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json' , 'Accept' => 'application/json' } result = RestClient . post '/doc_description' , params : { }, headers : headers p JSON . parse ( result ) import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' } r = requests . post ( '/doc_description' , headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Content-Type' => 'application/json' , 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'POST' , '/doc_description' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/doc_description\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"POST\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Content-Type\" : [] string { \"application/json\" }, \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"POST\" , \"/doc_description\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } POST /doc_description Build Doc Description Body parameter { \"titles\" : \"Dr.\" , \"category\" : \"clinic\" , \"name\" : \"\" , \"location\" : \"\" , \"speciality\" : \"\" , \"hobbies\" : \"\" , \"education\" : \"\" , \"keywords\" : \"\" , \"countries\" : \"\" , \"passion\" : \"\" , \"pronouns\" : \"she/her\" , \"service_years\" : \"\" , \"experience_years\" : \"\" } Parameters Name In Type Required Description body body DocItem true none Example responses 200 Response null Responses Status Meaning Description Schema 200 OK Successful Response Inline 422 Unprocessable Entity Validation Error HTTPValidationError Response Schema To perform this operation, you must be authenticated by means of one of the following methods: APIKeyQuery, APIKeyHeader, APIKeyCookie Schemas \u00b6 Body_make_keypoints_voice_post { \"sound\" : \"string\" } Body_make_keypoints_voice_post Properties \u00b6 Name Type Required Restrictions Description sound string(binary) true none none ClinicItem { \"category\" : \"clinic\" , \"name\" : \"\" , \"location\" : \"\" , \"year_founded\" : \"\" , \"services\" : \"\" , \"equipments\" : \"\" , \"keywords\" : \"\" } ClinicItem Properties \u00b6 Name Type Required Restrictions Description category string false none none name string false none none location string false none none year_founded string false none none services string false none none equipments string false none none keywords string false none none DocItem { \"titles\" : \"Dr.\" , \"category\" : \"clinic\" , \"name\" : \"\" , \"location\" : \"\" , \"speciality\" : \"\" , \"hobbies\" : \"\" , \"education\" : \"\" , \"keywords\" : \"\" , \"countries\" : \"\" , \"passion\" : \"\" , \"pronouns\" : \"she/her\" , \"service_years\" : \"\" , \"experience_years\" : \"\" } DocItem Properties \u00b6 Name Type Required Restrictions Description titles string false none none category string false none none name string false none none location string false none none speciality string false none none hobbies string false none none education string false none none keywords string false none none countries string false none none passion string false none none pronouns string false none none service_years string false none none experience_years string false none none GifImageModel { \"data_path\" : \"user_id/session_id/exercise_id\" , \"images\" : [ \"frame0.png\" , \"frame1.png\" , \"frame2.png\" , \"frame3.png\" ] } GifImageModel Properties \u00b6 Name Type Required Restrictions Description data_path string false none none images [any] false none none HTTPValidationError { \"detail\" : [ { \"loc\" : [ \"string\" ], \"msg\" : \"string\" , \"type\" : \"string\" } ] } HTTPValidationError Properties \u00b6 Name Type Required Restrictions Description detail [ ValidationError ] false none none KeypointsModel { \"url\" : \"https://firebasestorage.googleapis.com/v0/b/assessment-portal-70b0e.appspot.com/o/physiotestingdata%2Fascbadd%40pq.com%2F040612d8%2FRShoulderflexionFriNov04202217%3A03%3A17GMT%2B0530(IndiaStandardTime).webm?alt=media&token=f6157d85-3aee-4149-8ea4-f3093f3e8299\" , \"data_path\" : \"user_id/session_id/exercise_id\" , \"confidence\" : 0.5 , \"is_video_model\" : 0 } KeypointsModel Properties \u00b6 Name Type Required Restrictions Description url string false none none data_path string false none none confidence number false none none is_video_model integer false none none ReportModel { \"report_url\" : \"https://assessment.spryhealth.care/report/158b8f3d\" } ReportModel Properties \u00b6 Name Type Required Restrictions Description report_url string false none none ValidationError { \"loc\" : [ \"string\" ], \"msg\" : \"string\" , \"type\" : \"string\" } ValidationError Properties \u00b6 Name Type Required Restrictions Description loc [anyOf] true none none anyOf Name Type Required Restrictions Description \u00bb anonymous string false none none or Name Type Required Restrictions Description \u00bb anonymous integer false none none continued Name Type Required Restrictions Description msg string true none none type string true none none","title":"Spry RTM API"},{"location":"api/requests/#authentication","text":"API Key (APIKeyQuery) Parameter Name: ML_API_KEY , in: query. API Key (APIKeyHeader) Parameter Name: ML_API_KEY , in: header. API Key (APIKeyCookie) Parameter Name: ML_API_KEY , in: cookie.","title":"Authentication"},{"location":"api/requests/#make_pdf_pdf_post","text":"Code samples # You can also use wget curl -X POST /pdf \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json' POST /pdf HTTP / 1.1 Content-Type: application/json Accept: application/json const inputBody = '{ \"report_url\": \"https://assessment.spryhealth.care/report/158b8f3d\" }' ; const headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }; fetch ( '/pdf' , { method : 'POST' , body : inputBody , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json' , 'Accept' => 'application/json' } result = RestClient . post '/pdf' , params : { }, headers : headers p JSON . parse ( result ) import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' } r = requests . post ( '/pdf' , headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Content-Type' => 'application/json' , 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'POST' , '/pdf' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/pdf\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"POST\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Content-Type\" : [] string { \"application/json\" }, \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"POST\" , \"/pdf\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } POST /pdf Make Pdf Body parameter { \"report_url\" : \"https://assessment.spryhealth.care/report/158b8f3d\" }","title":"make_pdf_pdf_post"},{"location":"api/requests/#make_keypoints_keypoints_post","text":"Code samples # You can also use wget curl -X POST /keypoints \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json' POST /keypoints HTTP / 1.1 Content-Type: application/json Accept: application/json const inputBody = '{ \"url\": \"https://firebasestorage.googleapis.com/v0/b/assessment-portal-70b0e.appspot.com/o/physiotestingdata%2Fascbadd%40pq.com%2F040612d8%2FRShoulderflexionFriNov04202217%3A03%3A17GMT%2B0530(IndiaStandardTime).webm?alt=media&token=f6157d85-3aee-4149-8ea4-f3093f3e8299\", \"data_path\": \"user_id/session_id/exercise_id\", \"confidence\": 0.5, \"is_video_model\": 0 }' ; const headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }; fetch ( '/keypoints' , { method : 'POST' , body : inputBody , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json' , 'Accept' => 'application/json' } result = RestClient . post '/keypoints' , params : { }, headers : headers p JSON . parse ( result ) import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' } r = requests . post ( '/keypoints' , headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Content-Type' => 'application/json' , 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'POST' , '/keypoints' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/keypoints\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"POST\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Content-Type\" : [] string { \"application/json\" }, \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"POST\" , \"/keypoints\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } POST /keypoints Make Keypoints Body parameter { \"url\" : \"https://firebasestorage.googleapis.com/v0/b/assessment-portal-70b0e.appspot.com/o/physiotestingdata%2Fascbadd%40pq.com%2F040612d8%2FRShoulderflexionFriNov04202217%3A03%3A17GMT%2B0530(IndiaStandardTime).webm?alt=media&token=f6157d85-3aee-4149-8ea4-f3093f3e8299\" , \"data_path\" : \"user_id/session_id/exercise_id\" , \"confidence\" : 0.5 , \"is_video_model\" : 0 }","title":"make_keypoints_keypoints_post"},{"location":"api/requests/#make_keypoints_voice_post","text":"Code samples # You can also use wget curl -X POST /voice \\ -H 'Content-Type: multipart/form-data' \\ -H 'Accept: application/json' POST /voice HTTP / 1.1 Content-Type: multipart/form-data Accept: application/json const inputBody = '{ \"sound\": \"string\" }' ; const headers = { 'Content-Type' : 'multipart/form-data' , 'Accept' : 'application/json' }; fetch ( '/voice' , { method : 'POST' , body : inputBody , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Content-Type' => 'multipart/form-data' , 'Accept' => 'application/json' } result = RestClient . post '/voice' , params : { }, headers : headers p JSON . parse ( result ) import requests headers = { 'Content-Type' : 'multipart/form-data' , 'Accept' : 'application/json' } r = requests . post ( '/voice' , headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Content-Type' => 'multipart/form-data' , 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'POST' , '/voice' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/voice\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"POST\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Content-Type\" : [] string { \"multipart/form-data\" }, \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"POST\" , \"/voice\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } POST /voice Make Keypoints Body parameter sound : string","title":"make_keypoints_voice_post"},{"location":"api/requests/#get_status_tasks__task_id__get","text":"Code samples # You can also use wget curl -X GET /tasks/ { task_id } \\ -H 'Accept: application/json' GET /tasks/{task_id} HTTP / 1.1 Accept: application/json const headers = { 'Accept' : 'application/json' }; fetch ( '/tasks/{task_id}' , { method : 'GET' , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient . get '/tasks/{task_id}' , params : { }, headers : headers p JSON . parse ( result ) import requests headers = { 'Accept' : 'application/json' } r = requests . get ( '/tasks/ {task_id} ' , headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'GET' , '/tasks/{task_id}' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/tasks/{task_id}\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"GET\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"GET\" , \"/tasks/{task_id}\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } GET /tasks/{task_id} Get Status","title":"get_status_tasks__task_id__get"},{"location":"api/requests/#get_status_image_user_id_session_id_exercise_id_frame_id_get","text":"Code samples # You can also use wget curl -X GET /image/user_id/session_id/exercise_id/frame_id \\ -H 'Accept: application/json' GET /image/user_id/session_id/exercise_id/frame_id HTTP / 1.1 Accept: application/json const headers = { 'Accept' : 'application/json' }; fetch ( '/image/user_id/session_id/exercise_id/frame_id' , { method : 'GET' , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Accept' => 'application/json' } result = RestClient . get '/image/user_id/session_id/exercise_id/frame_id' , params : { 'user_id' => 'any' , 'session_id' => 'any' , 'exercise_id' => 'any' , 'frame_id' => 'any' }, headers : headers p JSON . parse ( result ) import requests headers = { 'Accept' : 'application/json' } r = requests . get ( '/image/user_id/session_id/exercise_id/frame_id' , params = { 'user_id' : null , 'session_id' : null , 'exercise_id' : null , 'frame_id' : null }, headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'GET' , '/image/user_id/session_id/exercise_id/frame_id' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/image/user_id/session_id/exercise_id/frame_id\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"GET\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"GET\" , \"/image/user_id/session_id/exercise_id/frame_id\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } GET /image/user_id/session_id/exercise_id/frame_id Get Status","title":"get_status_image_user_id_session_id_exercise_id_frame_id_get"},{"location":"api/requests/#get_gifs_gif_post","text":"Code samples # You can also use wget curl -X POST /gif \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json' POST /gif HTTP / 1.1 Content-Type: application/json Accept: application/json const inputBody = '{ \"data_path\": \"user_id/session_id/exercise_id\", \"images\": [ \"frame0.png\", \"frame1.png\", \"frame2.png\", \"frame3.png\" ] }' ; const headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }; fetch ( '/gif' , { method : 'POST' , body : inputBody , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json' , 'Accept' => 'application/json' } result = RestClient . post '/gif' , params : { }, headers : headers p JSON . parse ( result ) import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' } r = requests . post ( '/gif' , headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Content-Type' => 'application/json' , 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'POST' , '/gif' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/gif\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"POST\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Content-Type\" : [] string { \"application/json\" }, \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"POST\" , \"/gif\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } POST /gif Get Gifs Body parameter { \"data_path\" : \"user_id/session_id/exercise_id\" , \"images\" : [ \"frame0.png\" , \"frame1.png\" , \"frame2.png\" , \"frame3.png\" ] }","title":"get_gifs_gif_post"},{"location":"api/requests/#build_clinic_desctription_clinic_description_post","text":"Code samples # You can also use wget curl -X POST /clinic_description \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json' POST /clinic_description HTTP / 1.1 Content-Type: application/json Accept: application/json const inputBody = '{ \"category\": \"clinic\", \"name\": \"\", \"location\": \"\", \"year_founded\": \"\", \"services\": \"\", \"equipments\": \"\", \"keywords\": \"\" }' ; const headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }; fetch ( '/clinic_description' , { method : 'POST' , body : inputBody , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json' , 'Accept' => 'application/json' } result = RestClient . post '/clinic_description' , params : { }, headers : headers p JSON . parse ( result ) import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' } r = requests . post ( '/clinic_description' , headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Content-Type' => 'application/json' , 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'POST' , '/clinic_description' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/clinic_description\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"POST\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Content-Type\" : [] string { \"application/json\" }, \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"POST\" , \"/clinic_description\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } POST /clinic_description Build Clinic Desctription Body parameter { \"category\" : \"clinic\" , \"name\" : \"\" , \"location\" : \"\" , \"year_founded\" : \"\" , \"services\" : \"\" , \"equipments\" : \"\" , \"keywords\" : \"\" }","title":"build_clinic_desctription_clinic_description_post"},{"location":"api/requests/#build_doc_description_doc_description_post","text":"Code samples # You can also use wget curl -X POST /doc_description \\ -H 'Content-Type: application/json' \\ -H 'Accept: application/json' POST /doc_description HTTP / 1.1 Content-Type: application/json Accept: application/json const inputBody = '{ \"titles\": \"Dr.\", \"category\": \"clinic\", \"name\": \"\", \"location\": \"\", \"speciality\": \"\", \"hobbies\": \"\", \"education\": \"\", \"keywords\": \"\", \"countries\": \"\", \"passion\": \"\", \"pronouns\": \"she/her\", \"service_years\": \"\", \"experience_years\": \"\" }' ; const headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' }; fetch ( '/doc_description' , { method : 'POST' , body : inputBody , headers : headers }) . then ( function ( res ) { return res . json (); }). then ( function ( body ) { console . log ( body ); }); require 'rest-client' require 'json' headers = { 'Content-Type' => 'application/json' , 'Accept' => 'application/json' } result = RestClient . post '/doc_description' , params : { }, headers : headers p JSON . parse ( result ) import requests headers = { 'Content-Type' : 'application/json' , 'Accept' : 'application/json' } r = requests . post ( '/doc_description' , headers = headers ) print ( r . json ()) <?php require 'vendor/autoload.php' ; $headers = array ( 'Content-Type' => 'application/json' , 'Accept' => 'application/json' , ); $client = new \\GuzzleHttp\\Client (); // Define array of request body. $request_body = array (); try { $response = $client -> request ( 'POST' , '/doc_description' , array ( 'headers' => $headers , 'json' => $request_body , ) ); print_r ( $response -> getBody () -> getContents ()); } catch ( \\GuzzleHttp\\Exception\\BadResponseException $e ) { // handle exception or api errors. print_r ( $e -> getMessage ()); } // ... URL obj = new URL ( \"/doc_description\" ); HttpURLConnection con = ( HttpURLConnection ) obj . openConnection (); con . setRequestMethod ( \"POST\" ); int responseCode = con . getResponseCode (); BufferedReader in = new BufferedReader ( new InputStreamReader ( con . getInputStream ())); String inputLine ; StringBuffer response = new StringBuffer (); while (( inputLine = in . readLine ()) != null ) { response . append ( inputLine ); } in . close (); System . out . println ( response . toString ()); package main import ( \"bytes\" \"net/http\" ) func main () { headers := map [ string ][] string { \"Content-Type\" : [] string { \"application/json\" }, \"Accept\" : [] string { \"application/json\" }, } data := bytes . NewBuffer ([] byte { jsonReq }) req , err := http . NewRequest ( \"POST\" , \"/doc_description\" , data ) req . Header = headers client := & http . Client {} resp , err := client . Do ( req ) // ... } POST /doc_description Build Doc Description Body parameter { \"titles\" : \"Dr.\" , \"category\" : \"clinic\" , \"name\" : \"\" , \"location\" : \"\" , \"speciality\" : \"\" , \"hobbies\" : \"\" , \"education\" : \"\" , \"keywords\" : \"\" , \"countries\" : \"\" , \"passion\" : \"\" , \"pronouns\" : \"she/her\" , \"service_years\" : \"\" , \"experience_years\" : \"\" }","title":"build_doc_description_doc_description_post"},{"location":"api/requests/#schemas","text":"","title":"Schemas"},{"location":"api/requests/#properties","text":"Name Type Required Restrictions Description sound string(binary) true none none","title":"Properties"},{"location":"api/requests/#properties_1","text":"Name Type Required Restrictions Description category string false none none name string false none none location string false none none year_founded string false none none services string false none none equipments string false none none keywords string false none none","title":"Properties"},{"location":"api/requests/#properties_2","text":"Name Type Required Restrictions Description titles string false none none category string false none none name string false none none location string false none none speciality string false none none hobbies string false none none education string false none none keywords string false none none countries string false none none passion string false none none pronouns string false none none service_years string false none none experience_years string false none none","title":"Properties"},{"location":"api/requests/#properties_3","text":"Name Type Required Restrictions Description data_path string false none none images [any] false none none","title":"Properties"},{"location":"api/requests/#properties_4","text":"Name Type Required Restrictions Description detail [ ValidationError ] false none none","title":"Properties"},{"location":"api/requests/#properties_5","text":"Name Type Required Restrictions Description url string false none none data_path string false none none confidence number false none none is_video_model integer false none none","title":"Properties"},{"location":"api/requests/#properties_6","text":"Name Type Required Restrictions Description report_url string false none none","title":"Properties"},{"location":"api/requests/#properties_7","text":"Name Type Required Restrictions Description loc [anyOf] true none none anyOf Name Type Required Restrictions Description \u00bb anonymous string false none none or Name Type Required Restrictions Description \u00bb anonymous integer false none none continued Name Type Required Restrictions Description msg string true none none type string true none none","title":"Properties"},{"location":"ios/","text":"Introduction \u00b6 This documentation describes how to integrate your iOS app with Spry RTM SDK to build engaging computer vision assessment apps by using the Spry SDK for iOS. Code and samples for the Spry SDK for iOS will be available on GitHub. When you use the Spry SDK for iOS, follow the Spry RTM Terms of Use and Privacy Policy. App Store Connect Requirements \u00b6 To provide functionality within the Spry iOS SDK, we may receive and process certain contact, location, identifier, and device information associated with assessment users and their use of your application. The information we receive depends on what SDK features third party applications use.","title":"Introduction"},{"location":"ios/#introduction","text":"This documentation describes how to integrate your iOS app with Spry RTM SDK to build engaging computer vision assessment apps by using the Spry SDK for iOS. Code and samples for the Spry SDK for iOS will be available on GitHub. When you use the Spry SDK for iOS, follow the Spry RTM Terms of Use and Privacy Policy.","title":"Introduction"},{"location":"ios/#app-store-connect-requirements","text":"To provide functionality within the Spry iOS SDK, we may receive and process certain contact, location, identifier, and device information associated with assessment users and their use of your application. The information we receive depends on what SDK features third party applications use.","title":"App Store Connect Requirements"},{"location":"ios/install/","text":"Getting Started \u00b6 This documentation describes how to integrate your iOS app with Spry RTM SDK to build engaging computer vision assessment apps by using the Spry SDK for iOS. Code and samples for the Spry SDK for iOS will be available on GitHub. When you use the Spry SDK for iOS, follow the Spry RTM Terms of Use and Privacy Policy. App Store Connect Requirements \u00b6 To provide functionality within the Spry iOS SDK, we may receive and process certain contact, location, identifier, and device information associated with assessment users and their use of your application. The information we receive depends on what SDK features third party applications use.","title":"Getting Started"},{"location":"ios/install/#getting-started","text":"This documentation describes how to integrate your iOS app with Spry RTM SDK to build engaging computer vision assessment apps by using the Spry SDK for iOS. Code and samples for the Spry SDK for iOS will be available on GitHub. When you use the Spry SDK for iOS, follow the Spry RTM Terms of Use and Privacy Policy.","title":"Getting Started"},{"location":"ios/install/#app-store-connect-requirements","text":"To provide functionality within the Spry iOS SDK, we may receive and process certain contact, location, identifier, and device information associated with assessment users and their use of your application. The information we receive depends on what SDK features third party applications use.","title":"App Store Connect Requirements"},{"location":"js_sdk/","text":"Introduction \u00b6 This page is an overview of the Javascript SDK documentation and related resources. The Assessment Portal SDK for JavaScript enables developers to build libraries and applications that use Spry's Assessment Portal content and services. You can use the JavaScript API in the browser and inside Node.js applications on the server. The AP SDK for JavaScript API Reference Guide provides a JavaScript API. You can use the JavaScript API to build libraries or applications for Node.js or the browser.","title":"Introduction"},{"location":"js_sdk/#introduction","text":"This page is an overview of the Javascript SDK documentation and related resources. The Assessment Portal SDK for JavaScript enables developers to build libraries and applications that use Spry's Assessment Portal content and services. You can use the JavaScript API in the browser and inside Node.js applications on the server. The AP SDK for JavaScript API Reference Guide provides a JavaScript API. You can use the JavaScript API to build libraries or applications for Node.js or the browser.","title":"Introduction"},{"location":"js_sdk/configure/","text":"","title":"Configure"},{"location":"js_sdk/examples/","text":"","title":"Examples"},{"location":"js_sdk/install/","text":"Getting Started \u00b6","title":"Getting Started"},{"location":"js_sdk/install/#getting-started","text":"","title":"Getting Started"}]}